@page "/new"
@inject HttpClient Http
@inject NavigationManager NavigationManager

<AuthorizeView Context="AuthContext">
    <Authorized Context="AuthContext">
        <div class="col-md-6">
            <div class="container-fluid">
                <div class="row">
                    <div class="col-md-6">
                        <div class="page-header">
                            <h2>New To Do</h2>
                            <p class="text-muted">Fill the fields bellow to add a new To Do!</p>
                        </div>
                        <EditForm Model="@newToDo" OnValidSubmit="@HandleValidSubmit">
                            <DataAnnotationsValidator />

                            <div class="form-group">
                                <label for="title">Title</label>
                                <InputText id="title" Class="form-control" @bind-Value="@newToDo.Title" />
                                <ValidationMessage For="@(() => newToDo.Title)" />
                            </div>

                            <div class="form-group">
                                <label for="description">Description</label>
                                <InputTextArea id="description" Class="form-control" @bind-Value="@newToDo.Description" />
                                <ValidationMessage For="@(() => newToDo.Description)" />
                            </div>

                            <div class="form-group">
                                <label for="priority">Priority</label>
                                <InputSelect id="priority" name="priority" @bind-Value="@newToDo.Priority">
                                    <option value=@Priority.Low>Low</option>
                                    <option value=@Priority.Medium>Medium</option>
                                    <option value=@Priority.High>High</option>
                                </InputSelect>
                                <ValidationMessage For="@(() => newToDo.Priority)" />
                            </div>

                            <div class="form-group">
                                <label for="assign-to">Assign to</label>
                                <InputSelect id="priority" @bind-Value="@assignedUserId">
                                    @if (users != null && users.Count() > 0)
                                    {
                                        @foreach (var user in users)
                                        {
                                            <option value=@user.Id>@user.Name</option>
                                        }
                                    }
                                </InputSelect>
                                <ValidationMessage For="@(() => newToDo.Description)" />
                            </div>
                            <button type="submit" class="btn btn-primary">Create</button>
                        </EditForm>
                    </div>
                    <div class="col-md-6">
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-12">
                    </div>
                </div>
            </div>
        </div>
    </Authorized>
</AuthorizeView>

@code {
    private ToDoViewModel newToDo = new ToDoViewModel();
    private string assignedUserId;
    private List<UserViewModel> users;
    [CascadingParameter] Task<AuthenticationState> authenticationStateTask { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var authState = await authenticationStateTask;
            var user = authState.User;            
            users = (await Http.GetJsonAsync<IEnumerable<UserViewModel>>("User")).ToList();
            assignedUserId = users.First(x => x.Email == user.Identity.Name).UserAccountId;
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }

    }

    private async Task HandleValidSubmit()
    {
        var authState = await authenticationStateTask;
        var user = authState.User;

        newToDo.CreatedDateTime = DateTime.Now;
        newToDo.IsFinished = false;
        newToDo.AssignedtoUserId = assignedUserId;
        newToDo.CreatedByUserId = users.First(x => x.Email == user.Identity.Name).UserAccountId;

        await Http.PostJsonAsync("ToDo", newToDo);

        NavigationManager.NavigateTo("/");
    }
}