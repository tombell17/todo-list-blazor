@page "/new"
@inject HttpClient Http
@inject NavigationManager NavigationManager

<AuthorizeView Context="AuthContext">
    <Authorized Context="AuthContext">
        <h1>New To Do:</h1>
        <p>Fill the fields bellow to add a new To Do!</p>

        <EditForm Model="@newToDo" OnValidSubmit="@HandleValidSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <p>
                Title <InputText id="title" @bind-Value="@newToDo.Title" /> <br><br>
                Description <InputText id="description" @bind-Value="@newToDo.Description" /><br>
                Priority
                <InputSelect id="priority" @bind-Value="@newToDo.Priority">
                    <option value=@Priority.Low>Low</option>
                    <option value=@Priority.Medium>Medium</option>
                    <option value=@Priority.High>High</option>
                </InputSelect>
                Assign to
                <InputSelect id="priority" @bind-Value="@assignedUserId">
                    @if (users != null && users.Count() > 0)
                    {
                        @foreach (var user in users)
                        {
                            <option value=@user.UserAccountId>@user.Name</option>
                        }
                    }

                </InputSelect>
                <br>
            </p>

            <button type="submit">Create</button>
        </EditForm>
    </Authorized>
</AuthorizeView>

@code {
    private ToDoViewModel newToDo = new ToDoViewModel();
    private string assignedUserId;
    private List<UserViewModel> users;
    [CascadingParameter] Task<AuthenticationState> authenticationStateTask { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            users = (await Http.GetJsonAsync<IEnumerable<UserViewModel>>("User")).ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }

    }

    private async Task HandleValidSubmit()
    {
        var authState = await authenticationStateTask;
        var user = authState.User;

        newToDo.CreatedDateTime = DateTime.Now;
        newToDo.IsFinished = false;
        newToDo.AssignedtoUserId = assignedUserId;
        newToDo.CreatedByUserId = users.First(x => x.Email == user.Identity.Name).UserAccountId;

        await Http.PostJsonAsync("ToDo", newToDo);

        NavigationManager.NavigateTo("/");
    }
}