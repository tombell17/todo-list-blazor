@page "/"
@inject HttpClient Http

<AuthorizeView Context="AuthContext">
    <Authorized Context="AuthContext">               
            @if (todos != null && todos.Count() > 0)
            {

                <table class="table">
                    <thead>
                        <tr>
                            <th>Title</th>
                            <th>Description</th>
                            <th>Created</th>
                            <th>Completed</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var todo in todos)
                        {
                            int currentToDoId = todo.Id;
                            <tr>
                                <td>@todo.Title</td>
                                <td>@todo.Description</td>
                                <td>@todo.CreatedDateTime</td>
                                <td>@todo.IsFinished</td>
                                <td>
                                    <button id="update-todo-@currentToDoId" type="button" @onclick="(async () => await UpdateStatus(todo))">Update status</button>
                                    <button id="delete-todo-@currentToDoId" type="button" @onclick="(async () => await DeleteToDo(todo))">Delete</button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
        
    </Authorized>
</AuthorizeView>

@code {    
    List<ToDo> todos;

    public async Task DeleteToDo(ToDo todo)
    {
        await Http.SendJsonAsync(HttpMethod.Delete, "ToDo", todo);
        todos.Remove(todo);
    }

    public async Task UpdateStatus(ToDo todo)
    {
        todo.IsFinished = !todo.IsFinished;
        var updatedToDo = await Http.PutJsonAsync<ToDo>("ToDo", todo);
        var inmemoryToDo = todos.FirstOrDefault(x => x.Id == updatedToDo.Id);
        inmemoryToDo.IsFinished = updatedToDo.IsFinished;
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            todos = (await Http.GetJsonAsync<IEnumerable<ToDo>>("ToDo")).ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }

    }
}
